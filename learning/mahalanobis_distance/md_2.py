# MAHALANOBIS DISTANCE CALCULATION
from operator import gt
from statistics import mean
import numpy as np
from sklearn.metrics import mean_squared_error

# pred_arr1 = np.array(
#     [
#         -0.04953083,
#         0.00604855,
#         0.05712083,
#         0.02246845,
#         -0.00492951,
#         0.06593236,
#         -0.01681289,
#         0.8059889,
#         0.7266362,
#         -0.00983337,
#         0.32205227,
#         0.01089999,
#         0.00785795,
#         0.3431912,
#         0.05425254,
#         0.01125452,
#         0.23172346,
#         -0.00809318,
#         0.48902538,
#         -0.00113101,
#         0.25458184,
#         0.20820448,
#         0.7231865,
#         0.1973086,
#         0.6945996,
#         0.20463139,
#         0.48114112,
#         0.2130704,
#         0.5633688,
#         0.26650876,
#         0.28036204,
#     ]
# )
pred_arr1 = np.array(
    [
        0.04953083,
        0.00604855,
        0.05712083,
        0.02246845,
        0.00492951,
        0.06593236,
        0.01681289,
        0.8059889,
        0.7266362,
        0.00983337,
        0.32205227,
        0.01089999,
        0.00785795,
        0.3431912,
        0.05425254,
        0.01125452,
        0.23172346,
        0.00809318,
        0.48902538,
        0.00113101,
        0.25458184,
        0.20820448,
        0.7231865,
        0.1973086,
        0.6945996,
        0.20463139,
        0.48114112,
        0.2130704,
        0.5633688,
        0.26650876,
        0.28036204,
    ]
)
gt_arr1 = np.array(
    [
        0.01594372,
        0.04252227,
        0.0301462,
        0.03380061,
        0.01914402,
        0.04444103,
        0.02041229,
        0.7918307,
        0.79198694,
        0.0,
        0.2979866,
        0.0,
        0.0,
        0.40912578,
        0.0,
        0.0,
        0.26292917,
        0.0,
        0.57678926,
        0.02424451,
        0.2811372,
        0.23935473,
        0.7230194,
        0.23996165,
        0.7040325,
        0.21808398,
        0.50293356,
        0.21709089,
        0.5621446,
        0.2631632,
        0.2558286,
    ]
)

err_arr =  gt_arr1 - pred_arr1 # label - pred
# err_arr= np.array([-0.06547455, -0.03647372, 0.02697463, -0.01133216, -0.02407353, 0.02149133, -0.03722518, 0.0141582, -0.06535074, -0.00983337, 0.02406567, 0.01089999, 0.00785795, -0.06593458, 0.05425254, 0.01125452, -0.03120571, -0.00809318, -0.08776388, -0.02537552, -0.02655536, -0.03115025, 0.0001671, -0.04265305, -0.0094329, -0.01345259, -0.02179244, -0.00402049, 0.0012242, 0.00334556, 0.02453344])
print(f"ERR_ARR: {err_arr.shape}")

# makes model prediction and gets ground-truth at time i
# pred_arr2 = np.array(
#     [
#         -3.8530201e-02,
#         9.7672045e-03,
#         3.0537993e-02,
#         2.3309499e-02,
#         8.2485974e-03,
#         6.6037476e-02,
#         -1.5247256e-02,
#         8.0223227e-01,
#         7.2526884e-01,
#         -1.0478556e-02,
#         2.9891947e-01,
#         -4.3096244e-03,
#         -8.3655119e-05,
#         3.4097186e-01,
#         5.2130014e-02,
#         2.5661737e-02,
#         2.3771551e-01,
#         -1.0076404e-02,
#         4.9957588e-01,
#         -5.6049675e-03,
#         2.6022831e-01,
#         1.7402497e-01,
#         6.8174922e-01,
#         2.0568877e-01,
#         7.0297110e-01,
#         2.1535236e-01,
#         4.9532285e-01,
#         2.0482168e-01,
#         5.7058001e-01,
#         2.6713544e-01,
#         2.7377203e-01,
#     ]
# )
pred_arr2 = np.array(
    [
        3.8530201e-02,
        9.7672045e-03,
        3.0537993e-02,
        2.3309499e-02,
        8.2485974e-03,
        6.6037476e-02,
        1.5247256e-02,
        8.0223227e-01,
        7.2526884e-01,
        1.0478556e-02,
        2.9891947e-01,
        4.3096244e-03,
        8.3655119e-05,
        3.4097186e-01,
        5.2130014e-02,
        2.5661737e-02,
        2.3771551e-01,
        1.0076404e-02,
        4.9957588e-01,
        5.6049675e-03,
        2.6022831e-01,
        1.7402497e-01,
        6.8174922e-01,
        2.0568877e-01,
        7.0297110e-01,
        2.1535236e-01,
        4.9532285e-01,
        2.0482168e-01,
        5.7058001e-01,
        2.6713544e-01,
        2.7377203e-01,
    ]
)
gt_arr2 = np.array(
    [
        0.01637503,
        0.04119863,
        0.03391889,
        0.03516087,
        0.01348832,
        0.04482272,
        0.02529946,
        0.79170734,
        0.79186344,
        0.0,
        0.29013368,
        0.0,
        0.0,
        0.41290292,
        0.0,
        0.0,
        0.25932944,
        0.0,
        0.58699596,
        0.02424457,
        0.28120357,
        0.23846506,
        0.7360706,
        0.2390209,
        0.695615,
        0.21892956,
        0.49275237,
        0.21796149,
        0.5757046,
        0.26223797,
        0.25490332,
    ]
)

# calculate the error array at time i
next_err_arr = gt_arr2 - pred_arr2
print(f"Temp: {next_err_arr}")

# append to error database
err_arr = np.stack((err_arr, next_err_arr))  # err_arr
print(f"Stacked: {err_arr}")

# calculate the mean_err_arr
mean_err_arr = np.mean(err_arr, axis=0) 
print(f"Mean Error Arr: {mean_err_arr}")

# calculates the covariance matrix
df = np.stack((next_err_arr, mean_err_arr), axis=0)
print(f"\n\nDF: {df}\n\n")
cov = np.cov(df, rowvar=False)
# print(f"COV: {cov}")
covariance_pm1 = np.linalg.matrix_power(cov, -1)
print(f"Covariance matrix: {covariance_pm1.shape}")

# Mahalanobis Distance
md_ = (
    (next_err_arr - mean_err_arr).T.dot(covariance_pm1).dot(next_err_arr - mean_err_arr)
)
print(f"Mahalanobis: {md_}")
