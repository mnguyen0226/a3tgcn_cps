# MAHALANOBIS DISTANCE CALCULATION
import numpy as np
import pandas as pd
from scipy.stats import chi2
from matplotlib import patches
import matplotlib.pyplot as plt

# Collect 5 predictions and labesl
# pred_arr1 = np.array(
#     [
#         0.020174682,
#         0.012799442,
#         0.04910487,
#         0.03856057,
#         -0.007079959,
#         0.045596898,
#         0.017695367,
#         0.78167224,
#         0.7632853,
#         -0.0014361143,
#         0.03818363,
#         0.0034386516,
#         0.027982235,
#         0.41673723,
#         0.29678136,
#         -0.0031874776,
#         0.21287149,
#         0.0034342408,
#         0.5172912,
#         0.040563583,
#         0.29257208,
#         0.22969091,
#         0.5992017,
#         0.22986543,
#         0.70996606,
#         0.17503798,
#         0.667894,
#         0.20405924,
#         0.5570904,
#         0.27468914,
#         0.2492252,
#     ]
# )
# gt_arr1 = np.array(
#     [
#         0.014630047,
#         0.041327894,
#         0.03186278,
#         0.02798142,
#         0.025564658,
#         0.043613024,
#         0.033620954,
#         0.7889404,
#         0.78909576,
#         0.0,
#         0.0,
#         0.0,
#         0.0,
#         0.41012758,
#         0.3001206,
#         0.0,
#         0.0,
#         0.0,
#         0.55948144,
#         0.024245884,
#         0.28269085,
#         0.24582922,
#         0.5931442,
#         0.24549505,
#         0.7075933,
#         0.2132407,
#         0.69135606,
#         0.2132407,
#         0.4756116,
#         0.2659462,
#         0.25861156,
#     ]
# )
# pred_arr2 = np.array(
#     [
#         0.022113264,
#         0.016278684,
#         0.05012375,
#         0.03939259,
#         -0.0008433461,
#         0.051617563,
#         0.029655814,
#         0.7764827,
#         0.76057327,
#         0.00063312054,
#         0.10921562,
#         0.006396711,
#         0.020545721,
#         0.3687722,
#         0.2959867,
#         0.0010075569,
#         0.16619748,
#         -0.0018725991,
#         0.49081168,
#         0.0357123,
#         0.27906996,
#         0.22922522,
#         0.6196858,
#         0.22639072,
#         0.68368113,
#         0.1864807,
#         0.6573744,
#         0.20318091,
#         0.543315,
#         0.27003348,
#         0.23229975,
#     ]
# )
# gt_arr2 = np.array(
#     [
#         0.015325891,
#         0.042892326,
#         0.0291781,
#         0.030894324,
#         0.02962966,
#         0.040735655,
#         0.020923415,
#         0.7918894,
#         0.7920456,
#         0.0,
#         0.0,
#         0.0,
#         0.0,
#         0.41249165,
#         0.29964167,
#         0.0,
#         0.0,
#         0.0,
#         0.54006565,
#         0.024244478,
#         0.28110564,
#         0.24679776,
#         0.5786184,
#         0.24646,
#         0.70387447,
#         0.21260789,
#         0.69159776,
#         0.21260789,
#         0.44282165,
#         0.2668325,
#         0.25949785,
#     ]
# )
# pred_arr3 = np.array(
#     [
#         0.019025564,
#         0.019257963,
#         0.020491064,
#         0.037564695,
#         0.0097644925,
#         0.056824625,
#         0.03129983,
#         0.7711693,
#         0.77298284,
#         0.006313026,
#         0.18510228,
#         -0.0032339096,
#         0.015606821,
#         0.39016703,
#         0.2745064,
#         0.0018710494,
#         0.22068691,
#         0.0060781837,
#         0.49073875,
#         0.033984244,
#         0.27227736,
#         0.21328366,
#         0.6400367,
#         0.22226018,
#         0.6779504,
#         0.19517034,
#         0.6454435,
#         0.21178228,
#         0.54523957,
#         0.2709626,
#         0.2361505,
#     ]
# )
# gt_arr3 = np.array(
#     [
#         0.014836625,
#         0.044092678,
#         0.026007602,
#         0.032453965,
#         0.032211695,
#         0.041638777,
#         0.019598806,
#         0.79178184,
#         0.79193807,
#         0.0,
#         0.0,
#         0.0,
#         0.0,
#         0.41439322,
#         0.0,
#         0.0,
#         0.26587144,
#         0.0,
#         0.53193724,
#         0.024244528,
#         0.28116345,
#         0.24774434,
#         0.5595979,
#         0.24740368,
#         0.7010178,
#         0.21697892,
#         0.50851226,
#         0.21596514,
#         0.5504633,
#         0.2677519,
#         0.26041725,
#     ]
# )
# pred_arr4 = np.array(
#     [
#         -0.003928423,
#         0.022525132,
#         0.028811753,
#         0.033315063,
#         0.015749872,
#         0.052277982,
#         0.027225554,
#         0.76673627,
#         0.7764274,
#         0.01301533,
#         0.22202826,
#         -0.0023428798,
#         0.008938491,
#         0.38484085,
#         0.115195334,
#         0.010332525,
#         0.30119473,
#         0.011395633,
#         0.5407618,
#         0.035272956,
#         0.26958996,
#         0.1955939,
#         0.6582716,
#         0.21987176,
#         0.6829926,
#         0.19732112,
#         0.58377916,
#         0.21664262,
#         0.55171263,
#         0.2733873,
#         0.24566585,
#     ]
# )
# gt_arr4 = np.array(
#     [
#         0.015368411,
#         0.043890193,
#         0.025964025,
#         0.03284907,
#         0.025489133,
#         0.04293711,
#         0.019486684,
#         0.79049134,
#         0.79064715,
#         0.0,
#         0.29355296,
#         0.0,
#         0.0,
#         0.41083482,
#         0.0,
#         0.0,
#         0.2652303,
#         0.0,
#         0.5700275,
#         0.024245145,
#         0.28185743,
#         0.2406749,
#         0.7322637,
#         0.24125351,
#         0.70195496,
#         0.21787249,
#         0.5045648,
#         0.21686323,
#         0.55367553,
#         0.26439223,
#         0.25705758,
#     ]
# )
# pred_arr5 = np.array(
#     [
#         -0.00025236607,
#         0.023543,
#         0.047958374,
#         0.039734542,
#         0.0197528,
#         0.045108855,
#         0.02223885,
#         0.77052146,
#         0.77818066,
#         0.011674941,
#         0.29735428,
#         -0.008002341,
#         0.012838304,
#         0.3964926,
#         0.08415711,
#         0.011705995,
#         0.24603891,
#         0.0071329474,
#         0.55817163,
#         0.03707534,
#         0.27438527,
#         0.20667064,
#         0.72421527,
#         0.22117704,
#         0.6772195,
#         0.22711366,
#         0.5591305,
#         0.20631516,
#         0.5498364,
#         0.26401472,
#         0.2440598,
#     ]
# )
# gt_arr5 = np.array(
#     [
#         0.01594372,
#         0.042522274,
#         0.030146204,
#         0.03380061,
#         0.019144015,
#         0.04444103,
#         0.020412292,
#         0.7918307,
#         0.79198694,
#         0.0,
#         0.2979866,
#         0.0,
#         0.0,
#         0.40912578,
#         0.0,
#         0.0,
#         0.26292917,
#         0.0,
#         0.57678926,
#         0.024244506,
#         0.2811372,
#         0.23935473,
#         0.7230194,
#         0.23996165,
#         0.7040325,
#         0.21808398,
#         0.50293356,
#         0.21709089,
#         0.5621446,
#         0.2631632,
#         0.2558286,
#     ]
# )

# pred_arr6 = np.array([0.01637503,0.041198634,0.03391889,0.035160873,0.013488324,0.04482272,0.025299462,0.79170734,0.79186344,0.0,0.29013368,0.0,0.0,0.41290292,0.0,0.0,0.25932944,0.0,0.58699596,0.024244566,0.28120357,0.23846506,0.7360706,0.2390209,0.695615,0.21892956,0.49275237,0.21796149,0.5757046,0.26223797,0.25490332])
# pred_arr7 = np.array([0.015848065,0.039890174,0.03800128,0.033599105,0.014216439,0.04482272,0.026946435,0.7897942,0.7899498,0.0,0.29015124,0.0,0.0,0.40367985,0.28527513,0.0,0.24487936,0.0,0.59372705,0.024245476,0.28223214,0.23760091,0.7351756,0.23817079,0.7129241,0.16680364,0.67177695,0.16593309,0.57215244,0.2613101,0.2539755])
# pred_arr8 = np.array([0.0154407695,0.039263003,0.04195396,0.035550803,0.018742446,0.04482272,0.029777259,0.788691,0.78884625,0.0,0.28886288,0.0,0.0,0.0,0.2849898,0.0,0.24117786,0.0,0.54122996,0.024246003,0.2828248,0.24736547,0.7471866,0.24825248,0.5336354,0.1677452,0.6731959,0.16689888,0.58490986,0.26754728,0.26021266])
# pred_arr9 = np.array([0.015493573,0.042908918,0.042635452,0.024906218,0.022975909,0.04482272,0.034556497,0.7826086,0.78276205,0.0,0.0,0.0,0.0,0.0,0.28657898,0.0,0.24221529,0.0,0.43501556,0.024248889,0.28608733,0.2632274,0.6004079,0.2632274,0.5041139,0.16890319,0.6716119,0.1680501,0.5827815,0.2812369,0.2739023])
# pred_arr10 = np.array([0.01550364,0.044441488,0.03979943,0.02585827,0.026416337,0.04482272,0.038110632,0.7891227,0.7892781,0.0,0.0,0.0,0.0,0.4127917,0.2851193,0.0,0.2416207,0.0,0.5336811,0.024245797,0.28259292,0.24818264,0.59172356,0.24784443,0.70466197,0.1674414,0.6726707,0.1665922,0.58320546,0.26818767,0.26085305])
# gt_arr6 = np.array([0.0063304305,0.032058537,0.03727609,0.04068452,0.015947104,0.046176553,0.023760736,0.7694875,0.7808867,0.008980751,0.29757392,-0.0035626888,0.008166075,0.38652867,0.10584211,0.011305988,0.22491199,0.004882753,0.5550586,0.043658018,0.2810455,0.20479763,0.723145,0.22813028,0.680002,0.22615016,0.56466377,0.2005102,0.5458876,0.2600239,0.25882035])
# gt_arr7 = np.array([0.015928686,0.04050678,0.03767556,0.036990166,0.020227969,0.05057335,0.022577882,0.7671836,0.79152596,0.00258255,0.29205155,-0.0043300986,0.00610584,0.35648912,0.18941718,0.010856152,0.22465926,0.00071805716,0.556819,0.054507494,0.29055542,0.22269768,0.7416518,0.23649079,0.68083346,0.2166273,0.62246364,0.20009619,0.54021746,0.26550186,0.2619818])
# gt_arr8 = np.array([0.027346134,0.032170594,0.046040475,0.043251038,0.018333912,0.04851222,0.020858169,0.76969,0.7977576,-0.003712356,0.20787317,-0.012580752,0.016517699,0.34295893,0.31516546,4.6789646e-05,0.21916121,0.010444224,0.53524363,0.059065998,0.29065198,0.23692173,0.73513055,0.2410841,0.67344904,0.19551057,0.68542486,0.20510334,0.5427711,0.2681644,0.2509033])
# gt_arr9 = np.array([0.017722547,0.025940359,0.05041504,0.040984154,0.011931717,0.050291717,0.021306872,0.77594894,0.7964695,-0.0075377226,0.053223073,-0.020846903,0.011800349,0.21622795,0.30108732,-0.0068289638,0.2247479,0.013486326,0.5072416,0.053462327,0.28866285,0.25916308,0.6738974,0.24279231,0.65343285,0.17208087,0.671631,0.21062511,0.5435599,0.27784294,0.23705667])
# gt_arr10 = np.array([0.023599863,0.018085659,0.058042467,0.038346708,0.024487853,0.05321461,0.029597402,0.77984077,0.7739598,-0.0075009465,-0.018564165,-0.014595926,0.023602307,0.30325204,0.25586098,-0.0037098527,0.21007591,0.013257563,0.42615926,0.039732397,0.2851941,0.26403546,0.60098076,0.24477726,0.6792157,0.18614751,0.6627444,0.21371692,0.54371065,0.27617568,0.23415262])

### Unnormalize
pred_arr1 = np.array([2.475547,1.5705636,6.025444,4.731599,-0.8687508,5.594996,2.1713212,95.91558,93.6594,-0.17621931,4.685346,0.4219419,3.4335778,51.136,36.416744,-0.39112145,26.12053,0.42140067,63.47454,4.97738,35.90024,28.184366,73.52542,28.205782,87.11683,21.478146,81.95435,25.039217,68.35812,33.705902,30.581335])
gt_arr1 = np.array([1.795189,5.071165,3.9097424,3.4334776,3.1369274,5.3515635,4.12548,96.807434,96.82649,0.0,0.0,0.0,0.0,50.324963,36.826485,0.0,0.0,0.0,68.65152,2.9751065,34.68776,30.164629,72.78213,30.123625,86.82568,26.165834,84.83328,26.165834,58.360218,32.633095,31.733093])
pred_arr2 = np.array([2.7134218,1.9974861,6.1504664,4.8336926,-0.10348331,6.3337655,3.6389353,95.27879,93.32662,0.07768745,13.401371,0.7849124,2.5210755,45.250423,36.319237,0.1236329,20.393366,-0.22977845,60.225353,4.3821006,34.243454,28.127224,76.03894,27.779415,83.891525,22.88223,80.663536,24.93144,66.66781,33.13463,28.504486])
gt_arr2 = np.array([1.880573,5.2631297,3.580317,3.7909074,3.6357262,4.998494,2.5674207,97.16929,97.18845,0.0,0.0,0.0,0.0,50.615047,36.76772,0.0,0.0,0.0,66.2691,2.9749339,34.493244,30.283474,70.99973,30.24203,86.36936,26.088184,84.86294,26.088184,54.336708,32.741848,31.841846])
pred_arr3 = np.array([2.3345437,2.3630605,2.5143688,4.6093993,1.1981581,6.972701,3.840665,94.626816,94.84934,0.77464384,22.713093,-0.3968189,1.9150447,47.87569,33.68348,0.22958829,27.079527,0.7458273,60.216408,4.170058,33.409966,26.171104,78.5361,27.272575,83.188324,23.9485,79.19955,25.986877,66.90396,33.248634,28.976995])
gt_arr3 = np.array([1.8205374,5.4104195,3.1912792,3.982284,3.9525561,5.109312,2.4048839,97.15609,97.175255,0.0,0.0,0.0,0.0,50.84838,0.0,0.0,32.62392,0.0,65.27169,2.97494,34.50034,30.399624,68.66581,30.357824,86.01883,26.624535,62.397316,26.500137,67.544945,32.854664,31.954662])
pred_arr4 = np.array([-0.4820396,2.7639604,3.5353642,4.0879455,1.9325979,6.4148026,3.3407288,94.082855,95.27201,1.5970542,27.244116,-0.28748453,1.0968032,47.222137,14.135116,1.267859,36.958286,1.3983083,66.35452,4.3281903,33.080204,24.000471,80.77363,26.979502,83.80703,24.212412,71.63299,26.58327,67.69824,33.54616,30.144583])
gt_arr4 = np.array([1.8857906,5.385574,3.185932,4.0307655,3.12766,5.2686253,2.391126,96.997734,97.01685,0.0,36.0206,0.0,0.0,50.411743,0.0,0.0,32.54525,0.0,69.94558,2.9750156,34.58549,29.532164,89.852875,29.603163,86.13383,26.73418,61.912945,26.610338,67.9391,32.442413,31.542412])
pred_arr5 = np.array([-0.030966736,2.8888586,5.8847623,4.875652,2.4237797,5.5351105,2.728832,94.54732,95.487144,1.432581,36.487045,-0.9819322,1.5753322,48.651875,10.3265505,1.4363914,30.19036,0.8752528,68.4908,4.549353,33.668617,25.359652,88.86529,27.139668,83.09865,27.868124,68.60846,25.31603,67.46802,32.39609,29.947512])
gt_arr5 = np.array([1.9563841,5.2177224,3.6991088,4.147525,2.3490784,5.4531646,2.504703,97.16209,97.18125,0.0,36.564632,0.0,0.0,50.202034,0.0,0.0,32.26289,0.0,70.77529,2.9749372,34.497116,29.370173,88.71855,29.444645,86.38875,26.760132,61.71278,26.638273,68.9783,32.291607,31.391607])
pred_arr6 = np.array([0.7767795,3.9337628,4.573986,4.99222,1.9567994,5.666123,2.915576,94.42045,95.81919,1.1019887,36.513996,-0.43716198,1.0020233,47.42924,12.987423,1.3873084,27.597967,0.59914124,68.10881,5.3570843,34.485863,25.129822,88.73396,27.992868,83.44007,27.749897,69.28742,24.603731,66.98348,31.906395,31.758715])
gt_arr6 = np.array([2.0093083,5.055304,4.162039,4.314437,1.6550933,5.5,3.1043863,97.14694,97.1661,0.0,35.601036,0.0,0.0,50.665512,0.0,0.0,31.821182,0.0,72.02771,2.9749446,34.50526,29.261003,90.32,29.32921,85.35587,26.86389,60.46349,26.745102,70.64219,32.178074,31.27807])
pred_arr7 = np.array([1.9545394,4.97041,4.623003,4.5389013,2.4820857,6.2056346,2.7704332,94.13775,97.12469,0.31689343,35.83637,-0.5313275,0.74922097,43.74322,23.242554,1.3321109,27.566956,0.08810966,68.32483,6.6883764,35.652786,27.326258,91.004845,29.018751,83.5421,26.581388,76.37979,24.552929,66.28772,32.57857,32.14664])
gt_arr7 = np.array([1.9446467,4.8947487,4.662971,4.1227994,1.7444371,5.5,3.3064792,96.91219,96.93128,0.0,35.60319,0.0,0.0,49.53379,35.004864,0.0,30.048077,0.0,72.85365,2.9750564,34.63147,29.154968,90.21018,29.224895,87.479805,20.467745,82.43081,20.360924,70.20632,32.06422,31.164225])
pred_arr8 = np.array([3.3555245,3.9475129,5.6494255,5.3071456,2.249674,5.9527225,2.5594146,94.44529,97.88935,-0.45552698,25.507208,-1.5437291,2.0268147,42.08299,38.672577,0.0057413527,26.892315,1.2815651,65.67741,7.2477303,35.664635,29.071629,90.20466,29.582376,82.63599,23.990246,84.10549,25.167334,66.60107,32.90528,30.787249])
gt_arr8 = np.array([1.8946693,4.8177915,5.147987,4.3622837,2.2998035,5.5,3.6538372,96.776825,96.795876,0.0,35.445103,0.0,0.0,0.0,34.969852,0.0,29.59388,0.0,66.411964,2.975121,34.704197,30.353136,91.684,30.461977,65.480064,20.58328,82.60493,20.479431,71.77173,32.829556,31.929558])
pred_arr9 = np.array([2.1746562,3.183028,6.186209,5.0289865,1.4640889,6.171077,2.614473,95.2133,97.73129,-0.924921,6.530771,-2.5580323,1.4479692,26.532387,36.94511,-0.83795226,27.577831,1.6548481,62.241398,6.560128,35.420555,31.800768,82.691,29.791983,80.179886,21.115292,82.4129,25.844887,66.69786,34.09289,29.088188])
gt_arr9 = np.array([1.9011486,5.265166,5.23161,3.056133,2.8192732,5.5,4.240277,96.03048,96.04931,0.0,0.0,0.0,0.0,0.0,35.164852,0.0,29.72118,0.0,53.378857,2.975475,35.104527,32.299484,73.67343,32.299484,61.857613,20.725372,82.41056,20.620693,71.51057,34.50935,33.609352])
pred_arr10 = np.array([2.895836,2.219212,7.122137,4.705357,3.0047975,6.529732,3.6317677,95.69085,94.96922,-0.92040837,-2.2779274,-1.7910023,2.8961358,37.21073,31.395582,-0.4552198,25.777496,1.6267776,52.29214,4.8753886,34.994923,32.398636,73.74372,30.035547,83.34359,22.841347,81.322464,26.22427,66.716354,33.88831,28.731844])
gt_arr10 = np.array([1.9023839,5.453221,4.883614,3.1729553,3.2414331,5.5,4.676389,96.829796,96.84886,0.0,0.0,0.0,0.0,50.651863,34.98574,0.0,29.64822,0.0,65.48567,2.9750957,34.675743,30.453407,72.60781,30.411905,86.46599,20.546001,82.54048,20.4418,71.56259,32.90814,32.008137])


# Calculates errors
error_1 = gt_arr1 - pred_arr1
error_2 = gt_arr2 - pred_arr2
error_3 = gt_arr3 - pred_arr3
error_4 = gt_arr4 - pred_arr4
error_5 = gt_arr5 - pred_arr5
error_6 = gt_arr6 - pred_arr6
error_7 = gt_arr7 - pred_arr7
error_8 = gt_arr8 - pred_arr8
error_9 = gt_arr9 - pred_arr9
error_10 = gt_arr10 - pred_arr10

# Stacks errors - create a database
error_stack = np.stack((error_1, error_2, error_3, error_4, error_5, error_6, error_7, error_8, error_9, error_10))

# ###########################
# def is_pos_def(A):
#     if np.allclose(A, A.T):
#         try:
#             np.linalg.cholesky(A)
#             return True
#         except np.linalg.LinAlgError:
#             return False
#     else:
#         return False
    
# ###########################
# def MahalanobisDist(data, verbose=False):
#     covariance_matrix = np.cov(data, rowvar=False)
#     if is_pos_def(covariance_matrix):
#         inv_covariance_matrix = np.linalg.inv(covariance_matrix)
#         if is_pos_def(inv_covariance_matrix):
#             vars_mean = []
#             for i in range(data.shape[0]):
#                 vars_mean.append(list(data.mean(axis=0)))
#             diff = data - vars_mean
#             md = []
#             for i in range(len(diff)):
#                 md.append(np.sqrt(diff[i].dot(inv_covariance_matrix).dot(diff[i])))

#             if verbose:
#                 print("Covariance Matrix:\n {}\n".format(covariance_matrix))
#                 print("Inverse of Covariance Matrix:\n {}\n".format(inv_covariance_matrix))
#                 print("Variables Mean Vector:\n {}\n".format(vars_mean))
#                 print("Variables - Variables Mean Vector:\n {}\n".format(diff))
#                 print("Mahalanobis Distance:\n {}\n".format(md))
#             return md
#         else:
#             print("Error: Inverse of Covariance Matrix is not positive definite!")
#     else:
#         print("Error: Covariance Matrix is not positive definite!")

# MahalanobisDist(error_stack, verbose=True)
# ###########################


# Covariance Matrix of the stacked error (between predictions and loss)
covariance = np.cov(error_stack, rowvar=False)

# Covariance matrix power of -1
covariance_pm1 = np.linalg.matrix_power(covariance, -1)

# Calculates the mean error - center point
mean_error = np.mean(error_stack, axis=0)

md1_ = (error_1 - mean_error).T.dot(covariance_pm1).dot(error_1 - mean_error)
print(f"Mahalanobis 1: {md1_}")

md2_ = (error_2 - mean_error).T.dot(covariance_pm1).dot(error_2 - mean_error)
print(f"Mahalanobis 2: {md2_}")

md3_ = (error_3 - mean_error).T.dot(covariance_pm1).dot(error_3 - mean_error)
print(f"Mahalanobis 3: {md3_}")

md4_ = (error_4 - mean_error).T.dot(covariance_pm1).dot(error_4 - mean_error)
print(f"Mahalanobis 4: {md4_}")

md5_ = (error_5 - mean_error).T.dot(covariance_pm1).dot(error_5 - mean_error)
print(f"Mahalanobis 5: {md5_}")

md6_ = (error_6 - mean_error).T.dot(covariance_pm1).dot(error_6 - mean_error)
print(f"Mahalanobis 6: {md6_}")

md7_ = (error_7 - mean_error).T.dot(covariance_pm1).dot(error_7 - mean_error)
print(f"Mahalanobis 7: {md7_}")

md8_ = (error_8 - mean_error).T.dot(covariance_pm1).dot(error_8 - mean_error)
print(f"Mahalanobis 8: {md8_}")

md9_ = (error_9 - mean_error).T.dot(covariance_pm1).dot(error_9 - mean_error)
print(f"Mahalanobis 9: {md9_}")

md10_ = (error_10 - mean_error).T.dot(covariance_pm1).dot(error_10 - mean_error)
print(f"Mahalanobis 10: {md10_}")

distances = np.array([md1_, md2_, md3_, md4_, md5_, md6_, md7_, md8_, md9_, md10_])

############
# Cutoff (threshold) value from Chi-Sqaure Distribution for detecting outliers
cutoff = chi2.ppf(0.95, error_stack.shape[1])

print(f"Cut off: {cutoff}")

# Index of outliers
outlierIndexes = np.where(distances > cutoff)

print("--- Index/Position of Outliers ----")
# print(outlierIndexes)

print("--- Observations found as outlier -----")
# print(error_stack[distances > cutoff, :])
