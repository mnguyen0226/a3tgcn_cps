# MAHALANOBIS DISTANCE CALCULATION
import numpy as np
import pandas as pd
from scipy.stats import chi2
from matplotlib import patches
import matplotlib.pyplot as plt

# Collect 5 predictions and labesl
pred_arr1 = np.array(
    [
        0.020174682,
        0.012799442,
        0.04910487,
        0.03856057,
        -0.007079959,
        0.045596898,
        0.017695367,
        0.78167224,
        0.7632853,
        -0.0014361143,
        0.03818363,
        0.0034386516,
        0.027982235,
        0.41673723,
        0.29678136,
        -0.0031874776,
        0.21287149,
        0.0034342408,
        0.5172912,
        0.040563583,
        0.29257208,
        0.22969091,
        0.5992017,
        0.22986543,
        0.70996606,
        0.17503798,
        0.667894,
        0.20405924,
        0.5570904,
        0.27468914,
        0.2492252,
    ]
)
gt_arr1 = np.array(
    [
        0.014630047,
        0.041327894,
        0.03186278,
        0.02798142,
        0.025564658,
        0.043613024,
        0.033620954,
        0.7889404,
        0.78909576,
        0.0,
        0.0,
        0.0,
        0.0,
        0.41012758,
        0.3001206,
        0.0,
        0.0,
        0.0,
        0.55948144,
        0.024245884,
        0.28269085,
        0.24582922,
        0.5931442,
        0.24549505,
        0.7075933,
        0.2132407,
        0.69135606,
        0.2132407,
        0.4756116,
        0.2659462,
        0.25861156,
    ]
)
pred_arr2 = np.array(
    [
        0.022113264,
        0.016278684,
        0.05012375,
        0.03939259,
        -0.0008433461,
        0.051617563,
        0.029655814,
        0.7764827,
        0.76057327,
        0.00063312054,
        0.10921562,
        0.006396711,
        0.020545721,
        0.3687722,
        0.2959867,
        0.0010075569,
        0.16619748,
        -0.0018725991,
        0.49081168,
        0.0357123,
        0.27906996,
        0.22922522,
        0.6196858,
        0.22639072,
        0.68368113,
        0.1864807,
        0.6573744,
        0.20318091,
        0.543315,
        0.27003348,
        0.23229975,
    ]
)
gt_arr2 = np.array(
    [
        0.015325891,
        0.042892326,
        0.0291781,
        0.030894324,
        0.02962966,
        0.040735655,
        0.020923415,
        0.7918894,
        0.7920456,
        0.0,
        0.0,
        0.0,
        0.0,
        0.41249165,
        0.29964167,
        0.0,
        0.0,
        0.0,
        0.54006565,
        0.024244478,
        0.28110564,
        0.24679776,
        0.5786184,
        0.24646,
        0.70387447,
        0.21260789,
        0.69159776,
        0.21260789,
        0.44282165,
        0.2668325,
        0.25949785,
    ]
)
pred_arr3 = np.array(
    [
        0.019025564,
        0.019257963,
        0.020491064,
        0.037564695,
        0.0097644925,
        0.056824625,
        0.03129983,
        0.7711693,
        0.77298284,
        0.006313026,
        0.18510228,
        -0.0032339096,
        0.015606821,
        0.39016703,
        0.2745064,
        0.0018710494,
        0.22068691,
        0.0060781837,
        0.49073875,
        0.033984244,
        0.27227736,
        0.21328366,
        0.6400367,
        0.22226018,
        0.6779504,
        0.19517034,
        0.6454435,
        0.21178228,
        0.54523957,
        0.2709626,
        0.2361505,
    ]
)
gt_arr3 = np.array(
    [
        0.014836625,
        0.044092678,
        0.026007602,
        0.032453965,
        0.032211695,
        0.041638777,
        0.019598806,
        0.79178184,
        0.79193807,
        0.0,
        0.0,
        0.0,
        0.0,
        0.41439322,
        0.0,
        0.0,
        0.26587144,
        0.0,
        0.53193724,
        0.024244528,
        0.28116345,
        0.24774434,
        0.5595979,
        0.24740368,
        0.7010178,
        0.21697892,
        0.50851226,
        0.21596514,
        0.5504633,
        0.2677519,
        0.26041725,
    ]
)
pred_arr4 = np.array(
    [
        -0.003928423,
        0.022525132,
        0.028811753,
        0.033315063,
        0.015749872,
        0.052277982,
        0.027225554,
        0.76673627,
        0.7764274,
        0.01301533,
        0.22202826,
        -0.0023428798,
        0.008938491,
        0.38484085,
        0.115195334,
        0.010332525,
        0.30119473,
        0.011395633,
        0.5407618,
        0.035272956,
        0.26958996,
        0.1955939,
        0.6582716,
        0.21987176,
        0.6829926,
        0.19732112,
        0.58377916,
        0.21664262,
        0.55171263,
        0.2733873,
        0.24566585,
    ]
)
gt_arr4 = np.array(
    [
        0.015368411,
        0.043890193,
        0.025964025,
        0.03284907,
        0.025489133,
        0.04293711,
        0.019486684,
        0.79049134,
        0.79064715,
        0.0,
        0.29355296,
        0.0,
        0.0,
        0.41083482,
        0.0,
        0.0,
        0.2652303,
        0.0,
        0.5700275,
        0.024245145,
        0.28185743,
        0.2406749,
        0.7322637,
        0.24125351,
        0.70195496,
        0.21787249,
        0.5045648,
        0.21686323,
        0.55367553,
        0.26439223,
        0.25705758,
    ]
)
pred_arr5 = np.array(
    [
        -0.00025236607,
        0.023543,
        0.047958374,
        0.039734542,
        0.0197528,
        0.045108855,
        0.02223885,
        0.77052146,
        0.77818066,
        0.011674941,
        0.29735428,
        -0.008002341,
        0.012838304,
        0.3964926,
        0.08415711,
        0.011705995,
        0.24603891,
        0.0071329474,
        0.55817163,
        0.03707534,
        0.27438527,
        0.20667064,
        0.72421527,
        0.22117704,
        0.6772195,
        0.22711366,
        0.5591305,
        0.20631516,
        0.5498364,
        0.26401472,
        0.2440598,
    ]
)
gt_arr5 = np.array(
    [
        0.01594372,
        0.042522274,
        0.030146204,
        0.03380061,
        0.019144015,
        0.04444103,
        0.020412292,
        0.7918307,
        0.79198694,
        0.0,
        0.2979866,
        0.0,
        0.0,
        0.40912578,
        0.0,
        0.0,
        0.26292917,
        0.0,
        0.57678926,
        0.024244506,
        0.2811372,
        0.23935473,
        0.7230194,
        0.23996165,
        0.7040325,
        0.21808398,
        0.50293356,
        0.21709089,
        0.5621446,
        0.2631632,
        0.2558286,
    ]
)

pred_arr6 = [0.01637503,0.041198634,0.03391889,0.035160873,0.013488324,0.04482272,0.025299462,0.79170734,0.79186344,0.0,0.29013368,0.0,0.0,0.41290292,0.0,0.0,0.25932944,0.0,0.58699596,0.024244566,0.28120357,0.23846506,0.7360706,0.2390209,0.695615,0.21892956,0.49275237,0.21796149,0.5757046,0.26223797,0.25490332]
pred_arr7 = [0.015848065,0.039890174,0.03800128,0.033599105,0.014216439,0.04482272,0.026946435,0.7897942,0.7899498,0.0,0.29015124,0.0,0.0,0.40367985,0.28527513,0.0,0.24487936,0.0,0.59372705,0.024245476,0.28223214,0.23760091,0.7351756,0.23817079,0.7129241,0.16680364,0.67177695,0.16593309,0.57215244,0.2613101,0.2539755]
pred_arr8 = [0.0154407695,0.039263003,0.04195396,0.035550803,0.018742446,0.04482272,0.029777259,0.788691,0.78884625,0.0,0.28886288,0.0,0.0,0.0,0.2849898,0.0,0.24117786,0.0,0.54122996,0.024246003,0.2828248,0.24736547,0.7471866,0.24825248,0.5336354,0.1677452,0.6731959,0.16689888,0.58490986,0.26754728,0.26021266]
pred_arr9 = [0.015493573,0.042908918,0.042635452,0.024906218,0.022975909,0.04482272,0.034556497,0.7826086,0.78276205,0.0,0.0,0.0,0.0,0.0,0.28657898,0.0,0.24221529,0.0,0.43501556,0.024248889,0.28608733,0.2632274,0.6004079,0.2632274,0.5041139,0.16890319,0.6716119,0.1680501,0.5827815,0.2812369,0.2739023]
pred_arr10 = [0.01550364,0.044441488,0.03979943,0.02585827,0.026416337,0.04482272,0.038110632,0.7891227,0.7892781,0.0,0.0,0.0,0.0,0.4127917,0.2851193,0.0,0.2416207,0.0,0.5336811,0.024245797,0.28259292,0.24818264,0.59172356,0.24784443,0.70466197,0.1674414,0.6726707,0.1665922,0.58320546,0.26818767,0.26085305]
gt_arr6 = []
gt_arr7 = []
gt_arr8 = []
gt_arr9 = []
gt_arr10 = []

# Calculates errors
error_1 = gt_arr1 - pred_arr1
error_2 = gt_arr2 - pred_arr2
error_3 = gt_arr3 - pred_arr3
error_4 = gt_arr4 - pred_arr4
error_5 = gt_arr5 - pred_arr5

# Stacks errors
error_stack = np.stack((error_1, error_2, error_3, error_4, error_5))

# Covariance Matrix of the stacked error (between predictions and loss)
covariance = np.cov(error_stack, rowvar=False)

# Covariance matrix power of -1
covariance_pm1 = np.linalg.matrix_power(covariance, -1)

# Calculates the mean error
mean_error = np.mean(error_stack, axis=0)

# Calculate s the covariance matrix
md1_ = (error_1 - mean_error).T.dot(covariance_pm1).dot(error_1 - mean_error)
print(f"Mahalanobis 1: {md1_}")

md2_ = (error_2 - mean_error).T.dot(covariance_pm1).dot(error_2 - mean_error)
print(f"Mahalanobis 2: {md2_}")

md3_ = (error_3 - mean_error).T.dot(covariance_pm1).dot(error_3 - mean_error)
print(f"Mahalanobis 3: {md3_}")

md4_ = (error_4 - mean_error).T.dot(covariance_pm1).dot(error_4 - mean_error)
print(f"Mahalanobis 4: {md4_}")

md5_ = (error_5 - mean_error).T.dot(covariance_pm1).dot(error_5 - mean_error)
print(f"Mahalanobis 5: {md5_}")

distances = np.array([md1_, md2_, md3_, md4_, md5_])

############
# Cutoff (threshold) value from Chi-Sqaure Distribution for detecting outliers
cutoff = chi2.ppf(0.95, error_stack.shape[1])

# Index of outliers
outlierIndexes = np.where(distances > cutoff)

print("--- Index/Position of Outliers ----")
print(outlierIndexes)

print("--- Observations found as outlier -----")
print(error_stack[distances > cutoff, :])
