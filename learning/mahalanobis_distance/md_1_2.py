# Detect outliers using "Ozone" and "Temp".
import pandas as pd
import numpy as np
from scipy.stats import chi2
from matplotlib import patches
import matplotlib.pyplot as plt

### Unnormalize
pred_arr1 = np.array([2.475547,1.5705636,6.025444,4.731599,-0.8687508,5.594996,2.1713212,95.91558,93.6594,-0.17621931,4.685346,0.4219419,3.4335778,51.136,36.416744,-0.39112145,26.12053,0.42140067,63.47454,4.97738,35.90024,28.184366,73.52542,28.205782,87.11683,21.478146,81.95435,25.039217,68.35812,33.705902,30.581335])
gt_arr1 = np.array([1.795189,5.071165,3.9097424,3.4334776,3.1369274,5.3515635,4.12548,96.807434,96.82649,0.0,0.0,0.0,0.0,50.324963,36.826485,0.0,0.0,0.0,68.65152,2.9751065,34.68776,30.164629,72.78213,30.123625,86.82568,26.165834,84.83328,26.165834,58.360218,32.633095,31.733093])
pred_arr2 = np.array([2.7134218,1.9974861,6.1504664,4.8336926,-0.10348331,6.3337655,3.6389353,95.27879,93.32662,0.07768745,13.401371,0.7849124,2.5210755,45.250423,36.319237,0.1236329,20.393366,-0.22977845,60.225353,4.3821006,34.243454,28.127224,76.03894,27.779415,83.891525,22.88223,80.663536,24.93144,66.66781,33.13463,28.504486])
gt_arr2 = np.array([1.880573,5.2631297,3.580317,3.7909074,3.6357262,4.998494,2.5674207,97.16929,97.18845,0.0,0.0,0.0,0.0,50.615047,36.76772,0.0,0.0,0.0,66.2691,2.9749339,34.493244,30.283474,70.99973,30.24203,86.36936,26.088184,84.86294,26.088184,54.336708,32.741848,31.841846])
pred_arr3 = np.array([2.3345437,2.3630605,2.5143688,4.6093993,1.1981581,6.972701,3.840665,94.626816,94.84934,0.77464384,22.713093,-0.3968189,1.9150447,47.87569,33.68348,0.22958829,27.079527,0.7458273,60.216408,4.170058,33.409966,26.171104,78.5361,27.272575,83.188324,23.9485,79.19955,25.986877,66.90396,33.248634,28.976995])
gt_arr3 = np.array([1.8205374,5.4104195,3.1912792,3.982284,3.9525561,5.109312,2.4048839,97.15609,97.175255,0.0,0.0,0.0,0.0,50.84838,0.0,0.0,32.62392,0.0,65.27169,2.97494,34.50034,30.399624,68.66581,30.357824,86.01883,26.624535,62.397316,26.500137,67.544945,32.854664,31.954662])
pred_arr4 = np.array([-0.4820396,2.7639604,3.5353642,4.0879455,1.9325979,6.4148026,3.3407288,94.082855,95.27201,1.5970542,27.244116,-0.28748453,1.0968032,47.222137,14.135116,1.267859,36.958286,1.3983083,66.35452,4.3281903,33.080204,24.000471,80.77363,26.979502,83.80703,24.212412,71.63299,26.58327,67.69824,33.54616,30.144583])
gt_arr4 = np.array([1.8857906,5.385574,3.185932,4.0307655,3.12766,5.2686253,2.391126,96.997734,97.01685,0.0,36.0206,0.0,0.0,50.411743,0.0,0.0,32.54525,0.0,69.94558,2.9750156,34.58549,29.532164,89.852875,29.603163,86.13383,26.73418,61.912945,26.610338,67.9391,32.442413,31.542412])
pred_arr5 = np.array([-0.030966736,2.8888586,5.8847623,4.875652,2.4237797,5.5351105,2.728832,94.54732,95.487144,1.432581,36.487045,-0.9819322,1.5753322,48.651875,10.3265505,1.4363914,30.19036,0.8752528,68.4908,4.549353,33.668617,25.359652,88.86529,27.139668,83.09865,27.868124,68.60846,25.31603,67.46802,32.39609,29.947512])
gt_arr5 = np.array([1.9563841,5.2177224,3.6991088,4.147525,2.3490784,5.4531646,2.504703,97.16209,97.18125,0.0,36.564632,0.0,0.0,50.202034,0.0,0.0,32.26289,0.0,70.77529,2.9749372,34.497116,29.370173,88.71855,29.444645,86.38875,26.760132,61.71278,26.638273,68.9783,32.291607,31.391607])
pred_arr6 = np.array([0.7767795,3.9337628,4.573986,4.99222,1.9567994,5.666123,2.915576,94.42045,95.81919,1.1019887,36.513996,-0.43716198,1.0020233,47.42924,12.987423,1.3873084,27.597967,0.59914124,68.10881,5.3570843,34.485863,25.129822,88.73396,27.992868,83.44007,27.749897,69.28742,24.603731,66.98348,31.906395,31.758715])
gt_arr6 = np.array([2.0093083,5.055304,4.162039,4.314437,1.6550933,5.5,3.1043863,97.14694,97.1661,0.0,35.601036,0.0,0.0,50.665512,0.0,0.0,31.821182,0.0,72.02771,2.9749446,34.50526,29.261003,90.32,29.32921,85.35587,26.86389,60.46349,26.745102,70.64219,32.178074,31.27807])
pred_arr7 = np.array([1.9545394,4.97041,4.623003,4.5389013,2.4820857,6.2056346,2.7704332,94.13775,97.12469,0.31689343,35.83637,-0.5313275,0.74922097,43.74322,23.242554,1.3321109,27.566956,0.08810966,68.32483,6.6883764,35.652786,27.326258,91.004845,29.018751,83.5421,26.581388,76.37979,24.552929,66.28772,32.57857,32.14664])
gt_arr7 = np.array([1.9446467,4.8947487,4.662971,4.1227994,1.7444371,5.5,3.3064792,96.91219,96.93128,0.0,35.60319,0.0,0.0,49.53379,35.004864,0.0,30.048077,0.0,72.85365,2.9750564,34.63147,29.154968,90.21018,29.224895,87.479805,20.467745,82.43081,20.360924,70.20632,32.06422,31.164225])
pred_arr8 = np.array([3.3555245,3.9475129,5.6494255,5.3071456,2.249674,5.9527225,2.5594146,94.44529,97.88935,-0.45552698,25.507208,-1.5437291,2.0268147,42.08299,38.672577,0.0057413527,26.892315,1.2815651,65.67741,7.2477303,35.664635,29.071629,90.20466,29.582376,82.63599,23.990246,84.10549,25.167334,66.60107,32.90528,30.787249])
gt_arr8 = np.array([1.8946693,4.8177915,5.147987,4.3622837,2.2998035,5.5,3.6538372,96.776825,96.795876,0.0,35.445103,0.0,0.0,0.0,34.969852,0.0,29.59388,0.0,66.411964,2.975121,34.704197,30.353136,91.684,30.461977,65.480064,20.58328,82.60493,20.479431,71.77173,32.829556,31.929558])
pred_arr9 = np.array([2.1746562,3.183028,6.186209,5.0289865,1.4640889,6.171077,2.614473,95.2133,97.73129,-0.924921,6.530771,-2.5580323,1.4479692,26.532387,36.94511,-0.83795226,27.577831,1.6548481,62.241398,6.560128,35.420555,31.800768,82.691,29.791983,80.179886,21.115292,82.4129,25.844887,66.69786,34.09289,29.088188])
gt_arr9 = np.array([1.9011486,5.265166,5.23161,3.056133,2.8192732,5.5,4.240277,96.03048,96.04931,0.0,0.0,0.0,0.0,0.0,35.164852,0.0,29.72118,0.0,53.378857,2.975475,35.104527,32.299484,73.67343,32.299484,61.857613,20.725372,82.41056,20.620693,71.51057,34.50935,33.609352])
pred_arr10 = np.array([2.895836,2.219212,7.122137,4.705357,3.0047975,6.529732,3.6317677,95.69085,94.96922,-0.92040837,-2.2779274,-1.7910023,2.8961358,37.21073,31.395582,-0.4552198,25.777496,1.6267776,52.29214,4.8753886,34.994923,32.398636,73.74372,30.035547,83.34359,22.841347,81.322464,26.22427,66.716354,33.88831,28.731844])
gt_arr10 = np.array([1.9023839,5.453221,4.883614,3.1729553,3.2414331,5.5,4.676389,96.829796,96.84886,0.0,0.0,0.0,0.0,50.651863,34.98574,0.0,29.64822,0.0,65.48567,2.9750957,34.675743,30.453407,72.60781,30.411905,86.46599,20.546001,82.54048,20.4418,71.56259,32.90814,32.008137])


# Calculates errors
error_1 = gt_arr1 - pred_arr1
error_2 = gt_arr2 - pred_arr2
error_3 = gt_arr3 - pred_arr3
error_4 = gt_arr4 - pred_arr4
error_5 = gt_arr5 - pred_arr5
error_6 = gt_arr6 - pred_arr6
error_7 = gt_arr7 - pred_arr7
error_8 = gt_arr8 - pred_arr8
error_9 = gt_arr9 - pred_arr9
error_10 = gt_arr10 - pred_arr10

# Stacks errors - create a database
df = np.stack((error_1, error_2, error_3, error_4, error_5, error_6, error_7, error_8, error_9, error_10))

print(f"\n\nDF: {df}\n\n")
# 1. Calculate the covariance matrix
cov = np.cov(df, rowvar=False)

# Covariance matrix power of -1
# Covariance matrix indicates how variables variate together
covariance_pm1 = np.linalg.matrix_power(cov, -1)
print(f"Covariance matrix: {covariance_pm1}")

# 2. Center point
centerpoint = np.mean(df, axis=0)
print(f"Center point of Ozone and Temp: {centerpoint}")

# 3. Find the distance between the center point and each observation point in the dataset.
# We need to find the cutoff value from the Chi-Square distribution.
distances = []
for i, val in enumerate(df):
    p1 = val  # Ozone and Temp of the ith row
    p2 = centerpoint
    distance = (p1 - p2).T.dot(covariance_pm1).dot(p1 - p2)
    distances.append(distance)
    # print(f"Distance: {distance}")
distances = np.array(distances)

print(distances)

# # 4. Cutoff (threshold) value from Chi-Square Distribution for detecting outliers
# cutoff = chi2.ppf(0.95, df.shape[1])

# # Index of outliers
# outlierIndexes = np.where(distances > cutoff)

# print("--- Index of Outliers ----")
# print(outlierIndexes)
# # array([24, 35, 67, 81])

# print("--- Observations found as outlier -----")
# print(df[distances > cutoff, :])
# # [[115.  79.], [135.  84.], [122.  89.], [168.  81.]]

# ## 5. Finding ellipse dimensions
# pearson = cov[0, 1] / np.sqrt(cov[0, 0] * cov[1, 1])
# ell_radius_x = np.sqrt(1 + pearson)
# ell_radius_y = np.sqrt(1 - pearson)
# lambda_, v = np.linalg.eig(cov)
# lambda_ = np.sqrt(lambda_)

# # Ellipse patch
# ellipse = patches.Ellipse(
#     xy=(centerpoint[0], centerpoint[1]),
#     width=lambda_[0] * np.sqrt(cutoff) * 2,
#     height=lambda_[1] * np.sqrt(cutoff) * 2,
#     angle=np.rad2deg(np.arccos(v[0, 0])),
#     edgecolor="#fab1a0",
# )
# ellipse.set_facecolor("#0984e3")
# ellipse.set_alpha(0.5)
# fig = plt.figure()
# ax = plt.subplot()
# ax.add_artist(ellipse)
# plt.scatter(df[:, 0], df[:, 1])
# plt.show()
