# Detect outliers using "Ozone" and "Temp".
import pandas as pd
import numpy as np
from scipy.stats import chi2
from matplotlib import patches
import matplotlib.pyplot as plt
import seaborn as sns
import scipy as sp
from sklearn.covariance import MinCovDet

### Unnormalize
pred_arr1 = np.array([2.475547,1.5705636,6.025444,4.731599,-0.8687508,5.594996,2.1713212,95.91558,93.6594,-0.17621931,4.685346,0.4219419,3.4335778,51.136,36.416744,-0.39112145,26.12053,0.42140067,63.47454,4.97738,35.90024,28.184366,73.52542,28.205782,87.11683,21.478146,81.95435,25.039217,68.35812,33.705902,30.581335])
gt_arr1 = np.array([1.795189,5.071165,3.9097424,3.4334776,3.1369274,5.3515635,4.12548,96.807434,96.82649,0.0,0.0,0.0,0.0,50.324963,36.826485,0.0,0.0,0.0,68.65152,2.9751065,34.68776,30.164629,72.78213,30.123625,86.82568,26.165834,84.83328,26.165834,58.360218,32.633095,31.733093])
pred_arr2 = np.array([2.7134218,1.9974861,6.1504664,4.8336926,-0.10348331,6.3337655,3.6389353,95.27879,93.32662,0.07768745,13.401371,0.7849124,2.5210755,45.250423,36.319237,0.1236329,20.393366,-0.22977845,60.225353,4.3821006,34.243454,28.127224,76.03894,27.779415,83.891525,22.88223,80.663536,24.93144,66.66781,33.13463,28.504486])
gt_arr2 = np.array([1.880573,5.2631297,3.580317,3.7909074,3.6357262,4.998494,2.5674207,97.16929,97.18845,0.0,0.0,0.0,0.0,50.615047,36.76772,0.0,0.0,0.0,66.2691,2.9749339,34.493244,30.283474,70.99973,30.24203,86.36936,26.088184,84.86294,26.088184,54.336708,32.741848,31.841846])
pred_arr3 = np.array([2.3345437,2.3630605,2.5143688,4.6093993,1.1981581,6.972701,3.840665,94.626816,94.84934,0.77464384,22.713093,-0.3968189,1.9150447,47.87569,33.68348,0.22958829,27.079527,0.7458273,60.216408,4.170058,33.409966,26.171104,78.5361,27.272575,83.188324,23.9485,79.19955,25.986877,66.90396,33.248634,28.976995])
gt_arr3 = np.array([1.8205374,5.4104195,3.1912792,3.982284,3.9525561,5.109312,2.4048839,97.15609,97.175255,0.0,0.0,0.0,0.0,50.84838,0.0,0.0,32.62392,0.0,65.27169,2.97494,34.50034,30.399624,68.66581,30.357824,86.01883,26.624535,62.397316,26.500137,67.544945,32.854664,31.954662])
pred_arr4 = np.array([-0.4820396,2.7639604,3.5353642,4.0879455,1.9325979,6.4148026,3.3407288,94.082855,95.27201,1.5970542,27.244116,-0.28748453,1.0968032,47.222137,14.135116,1.267859,36.958286,1.3983083,66.35452,4.3281903,33.080204,24.000471,80.77363,26.979502,83.80703,24.212412,71.63299,26.58327,67.69824,33.54616,30.144583])
gt_arr4 = np.array([1.8857906,5.385574,3.185932,4.0307655,3.12766,5.2686253,2.391126,96.997734,97.01685,0.0,36.0206,0.0,0.0,50.411743,0.0,0.0,32.54525,0.0,69.94558,2.9750156,34.58549,29.532164,89.852875,29.603163,86.13383,26.73418,61.912945,26.610338,67.9391,32.442413,31.542412])
pred_arr5 = np.array([-0.030966736,2.8888586,5.8847623,4.875652,2.4237797,5.5351105,2.728832,94.54732,95.487144,1.432581,36.487045,-0.9819322,1.5753322,48.651875,10.3265505,1.4363914,30.19036,0.8752528,68.4908,4.549353,33.668617,25.359652,88.86529,27.139668,83.09865,27.868124,68.60846,25.31603,67.46802,32.39609,29.947512])
gt_arr5 = np.array([1.9563841,5.2177224,3.6991088,4.147525,2.3490784,5.4531646,2.504703,97.16209,97.18125,0.0,36.564632,0.0,0.0,50.202034,0.0,0.0,32.26289,0.0,70.77529,2.9749372,34.497116,29.370173,88.71855,29.444645,86.38875,26.760132,61.71278,26.638273,68.9783,32.291607,31.391607])
pred_arr6 = np.array([0.7767795,3.9337628,4.573986,4.99222,1.9567994,5.666123,2.915576,94.42045,95.81919,1.1019887,36.513996,-0.43716198,1.0020233,47.42924,12.987423,1.3873084,27.597967,0.59914124,68.10881,5.3570843,34.485863,25.129822,88.73396,27.992868,83.44007,27.749897,69.28742,24.603731,66.98348,31.906395,31.758715])
gt_arr6 = np.array([2.0093083,5.055304,4.162039,4.314437,1.6550933,5.5,3.1043863,97.14694,97.1661,0.0,35.601036,0.0,0.0,50.665512,0.0,0.0,31.821182,0.0,72.02771,2.9749446,34.50526,29.261003,90.32,29.32921,85.35587,26.86389,60.46349,26.745102,70.64219,32.178074,31.27807])
pred_arr7 = np.array([1.9545394,4.97041,4.623003,4.5389013,2.4820857,6.2056346,2.7704332,94.13775,97.12469,0.31689343,35.83637,-0.5313275,0.74922097,43.74322,23.242554,1.3321109,27.566956,0.08810966,68.32483,6.6883764,35.652786,27.326258,91.004845,29.018751,83.5421,26.581388,76.37979,24.552929,66.28772,32.57857,32.14664])
gt_arr7 = np.array([1.9446467,4.8947487,4.662971,4.1227994,1.7444371,5.5,3.3064792,96.91219,96.93128,0.0,35.60319,0.0,0.0,49.53379,35.004864,0.0,30.048077,0.0,72.85365,2.9750564,34.63147,29.154968,90.21018,29.224895,87.479805,20.467745,82.43081,20.360924,70.20632,32.06422,31.164225])
pred_arr8 = np.array([3.3555245,3.9475129,5.6494255,5.3071456,2.249674,5.9527225,2.5594146,94.44529,97.88935,-0.45552698,25.507208,-1.5437291,2.0268147,42.08299,38.672577,0.0057413527,26.892315,1.2815651,65.67741,7.2477303,35.664635,29.071629,90.20466,29.582376,82.63599,23.990246,84.10549,25.167334,66.60107,32.90528,30.787249])
gt_arr8 = np.array([1.8946693,4.8177915,5.147987,4.3622837,2.2998035,5.5,3.6538372,96.776825,96.795876,0.0,35.445103,0.0,0.0,0.0,34.969852,0.0,29.59388,0.0,66.411964,2.975121,34.704197,30.353136,91.684,30.461977,65.480064,20.58328,82.60493,20.479431,71.77173,32.829556,31.929558])
pred_arr9 = np.array([2.1746562,3.183028,6.186209,5.0289865,1.4640889,6.171077,2.614473,95.2133,97.73129,-0.924921,6.530771,-2.5580323,1.4479692,26.532387,36.94511,-0.83795226,27.577831,1.6548481,62.241398,6.560128,35.420555,31.800768,82.691,29.791983,80.179886,21.115292,82.4129,25.844887,66.69786,34.09289,29.088188])
gt_arr9 = np.array([1.9011486,5.265166,5.23161,3.056133,2.8192732,5.5,4.240277,96.03048,96.04931,0.0,0.0,0.0,0.0,0.0,35.164852,0.0,29.72118,0.0,53.378857,2.975475,35.104527,32.299484,73.67343,32.299484,61.857613,20.725372,82.41056,20.620693,71.51057,34.50935,33.609352])
pred_arr10 = np.array([2.895836,2.219212,7.122137,4.705357,3.0047975,6.529732,3.6317677,95.69085,94.96922,-0.92040837,-2.2779274,-1.7910023,2.8961358,37.21073,31.395582,-0.4552198,25.777496,1.6267776,52.29214,4.8753886,34.994923,32.398636,73.74372,30.035547,83.34359,22.841347,81.322464,26.22427,66.716354,33.88831,28.731844])
gt_arr10 = np.array([1.9023839,5.453221,4.883614,3.1729553,3.2414331,5.5,4.676389,96.829796,96.84886,0.0,0.0,0.0,0.0,50.651863,34.98574,0.0,29.64822,0.0,65.48567,2.9750957,34.675743,30.453407,72.60781,30.411905,86.46599,20.546001,82.54048,20.4418,71.56259,32.90814,32.008137])
pred_arr11 = np.array([4.413857,1.6542118,9.147343,5.064495,2.8031187,6.241202,5.0645094,95.49469,93.41613,-0.38974643,2.8911772,0.015044538,3.4516356,48.852745,24.74145,0.65014786,22.187302,2.3835392,58.725605,3.0899377,35.252396,30.032776,73.06443,29.03906,85.33243,25.32736,78.62934,25.885843,69.04466,34.02104,29.108812])
gt_arr11 = np.array([2.1473331,5.1287093,4.5064116,3.467777,3.7042675,5.2456784,3.5998821,92.81333,92.83122,0.0,0.0,0.0,0.0,49.73357,37.292683,0.0,0.0,0.0,0.0,2.9769752,36.817375,28.160807,73.06234,28.120687,85.97849,28.010695,85.819824,28.010695,57.486885,40.01148,29.534185])
pred_arr12 = np.array([4.2924695,1.6204877,7.5816793,5.434545,1.2478044,5.924001,5.2508802,97.30201,87.59833,-0.3323914,3.4957232,0.9264642,0.48905355,28.279938,22.170567,-1.2076808,15.813053,1.4931394,-1.4529134,1.9731604,34.159683,30.72214,71.74494,28.315636,80.06322,26.462685,75.83065,26.262112,61.26129,33.523094,28.116114])
gt_arr12 = np.array([2.5009565,4.6020546,4.1632543,3.7279637,3.8034751,5.0285707,2.4717443,92.00516,92.02282,0.0,0.0,0.0,0.0,49.823555,0.0,0.0,33.22497,0.0,0.0,2.977345,37.244358,27.627554,69.89413,27.587301,85.27078,29.144512,63.030685,29.015837,67.85947,40.624355,29.001549])
pred_arr13 = np.array([1.8494397,1.5304545,7.188759,5.0664697,-0.7142682,6.3319807,4.80413,97.854546,86.10088,0.5160416,2.7908607,0.28150913,1.3779174,34.13271,4.0384455,0.6861538,33.623966,2.0757732,3.0903325,1.822086,34.764866,29.139341,72.50499,28.309938,81.588646,26.90646,65.05959,26.688303,67.71742,38.14732,32.78736])
gt_arr13 = np.array([2.863094,4.074081,3.7135036,3.7886503,3.088761,5.20466,2.4782195,92.1643,92.182014,0.0,0.0,0.0,0.0,49.786106,0.0,0.0,33.151222,0.0,0.0,2.9772725,37.160385,27.102325,69.63309,27.06213,84.818184,29.234652,61.145763,29.106504,68.22306,40.619167,28.476065])
pred_arr14 = np.array([2.174232,1.4635184,8.04572,4.6879134,-1.0042101,6.4493093,3.99683,97.82151,86.046715,1.0524082,5.5510254,0.15873927,2.555853,40.7343,1.384339,0.59988725,28.879034,1.7576951,1.8885686,2.3466263,35.008263,27.900818,75.56048,28.157343,84.152664,29.594305,63.29054,25.718292,69.35684,39.134182,31.125557])
gt_arr14 = np.array([3.198745,3.5463095,3.2701843,3.7223914,2.2136848,5.4005694,2.5920577,93.05063,93.068596,0.0,0.0,0.0,0.0,49.904068,0.0,0.0,33.14624,0.0,0.0,2.976866,36.691753,26.565895,70.30418,26.525522,84.05239,28.961023,59.634342,28.832912,67.96789,40.185802,27.940441])
pred_arr15 = np.array([3.5017717,2.4777632,7.379072,4.4644613,0.94357854,6.8054633,3.4374833,96.85434,88.304146,1.0584934,13.648527,-0.3297365,2.6932943,46.343506,9.430593,0.7211944,28.004301,1.4476328,2.7691972,3.6501036,36.10178,26.59954,79.54448,27.728386,85.28525,29.58193,68.73622,25.201519,69.1802,38.807507,31.038097])
gt_arr15 = np.array([3.4354384,2.9291499,3.0753763,3.385987,1.5574688,5.5,2.6133444,94.1936,94.2119,0.0,34.87162,0.0,0.0,48.494278,36.583813,0.0,31.407965,0.0,0.0,2.976337,36.08506,22.701069,85.02005,22.768385,82.978004,21.202827,80.37766,21.086882,66.41316,39.328915,24.47401])
pred_arr16 = np.array([5.3629136,3.0954888,4.8400702,3.8401532,1.3016342,6.6923184,3.0005553,95.47851,91.1738,1.1090685,34.036545,-0.81383127,0.903806,48.618618,30.613691,1.3105131,25.975548,2.5802078,4.5820312,4.7782755,36.08272,24.68166,87.12599,26.04105,85.13455,26.44462,81.92702,25.319769,68.81766,36.68754,29.11067])
gt_arr16 = np.array([3.533669,2.0468202,3.446454,3.0254984,1.7346008,5.490977,2.1832254,93.0557,93.07367,0.0,34.221504,0.0,0.0,48.197987,36.41889,0.0,31.486874,0.0,0.0,2.9768636,36.689068,21.929537,85.34629,21.993668,82.75168,21.804306,81.27783,21.68782,66.7432,39.96284,23.688871])
pred_arr17 = np.array([3.7024996,2.466017,4.975522,3.833783,0.1874314,5.3778486,2.6359904,94.56848,92.11985,0.33468065,35.705494,-0.13698795,0.7754922,46.812305,32.987854,1.2011788,27.081202,1.8777589,14.819434,5.446123,36.04544,22.70839,89.07899,24.806719,84.11885,21.863007,82.488815,25.67879,67.25871,35.059013,28.156736])
gt_arr17 = np.array([3.6956747,1.1748643,3.819757,2.7890093,2.0279849,5.5,2.1318889,91.281746,91.2992,0.0,31.920156,0.0,0.0,47.048782,35.840267,0.0,30.57244,0.0,0.0,2.977674,37.625427,21.451832,88.56438,21.505281,84.339645,23.136063,83.64075,23.025764,71.16197,41.010807,23.163242])
pred_arr18 = np.array([3.2269695,0.5755907,5.5387673,4.66162,1.5049366,5.050182,2.567833,95.64623,90.37366,-0.34181163,35.61354,-0.72656274,2.2716815,46.512863,33.467346,-0.03923136,27.342787,1.6380848,38.628277,4.905902,36.43747,23.82777,91.109055,24.468906,83.17128,21.593578,83.25525,26.745789,66.87741,34.159557,27.273027])
gt_arr18 = np.array([3.8570933,0.5534305,4.3054376,3.133758,2.6027746,5.5,2.7755077,95.15324,95.171814,0.0,32.89796,0.0,0.0,47.92552,35.092087,0.0,29.59015,0.0,109.5615,2.9758885,35.573647,25.654139,91.23254,25.71148,86.97016,22.346418,84.157104,22.242594,73.54677,28.743671,27.84367])
pred_arr19 = np.array([2.994141,-1.0932047,6.241545,4.3159175,1.831221,4.419825,3.5293815,95.614456,93.189644,0.14771733,32.715317,-0.599858,2.3377838,44.13497,32.113758,-0.18190946,27.479702,1.0319735,98.35837,4.3155885,36.710495,23.986984,92.58559,24.398739,83.036835,23.242685,82.329315,27.926899,65.445335,30.531446,26.46586])
gt_arr19 = np.array([3.7064834,0.8511036,4.842653,3.7373455,3.2367363,5.5,3.7424827,95.04407,95.062614,0.0,32.46155,0.0,0.0,47.62749,34.78901,0.0,29.16608,0.0,108.03268,2.9759398,35.63192,25.928993,92.198685,25.98445,87.78321,22.520538,84.85118,22.41945,75.04619,28.996994,28.096994])
pred_arr20 = np.array([4.7893195,-0.45887673,6.5927334,4.625841,1.4632258,5.294997,5.3632283,95.75285,91.725784,0.055745978,17.17772,-0.9619143,2.0029933,40.406647,24.702364,-0.24648322,25.577024,1.3088456,88.173225,3.5447843,37.54714,25.61867,85.51977,26.106686,83.1647,23.99345,78.33185,27.761183,63.404408,26.92464,27.007814])
gt_arr20 = np.array([3.5844495,1.1434277,5.3861775,4.387017,3.9017828,5.497617,4.7891636,94.34214,94.36047,0.0,0.0,0.0,0.0,47.568226,36.119453,0.0,0.0,0.0,100.0276,2.9762678,36.006023,27.944448,76.570404,27.907505,89.81389,28.21833,88.16384,28.21833,61.297318,30.586878,29.686878])

# Calculates errors
error_1 = gt_arr1 - pred_arr1
error_2 = gt_arr2 - pred_arr2
error_3 = gt_arr3 - pred_arr3
error_4 = gt_arr4 - pred_arr4
error_5 = gt_arr5 - pred_arr5
error_6 = gt_arr6 - pred_arr6
error_7 = gt_arr7 - pred_arr7
error_8 = gt_arr8 - pred_arr8
error_9 = gt_arr9 - pred_arr9
error_10 = gt_arr10 - pred_arr10
error_11 = gt_arr11 - pred_arr11
error_12 = gt_arr12 - pred_arr12
error_13 = gt_arr13 - pred_arr13
error_14 = gt_arr14 - pred_arr14
error_15 = gt_arr15 - pred_arr15
error_16 = gt_arr16 - pred_arr16
error_17 = gt_arr17 - pred_arr17
error_18 = gt_arr18 - pred_arr18
error_19 = gt_arr19 - pred_arr19
error_20 = gt_arr20 - pred_arr20

# Stacks errors - create a database
df = np.stack((error_1, error_2, error_3, error_4, error_5, error_6, error_7, error_8, error_9, error_10, error_11, error_12, error_13, error_14, error_15, error_16, error_17, error_18, error_19, error_20))
# df = np.stack((error_1, error_2, error_3, error_4, error_5, error_6, error_7, error_8, error_9, error_10))
               
print(f"\n\nDF: {df}\n\n")
# 1. Calculate the covariance matrix
cov = np.cov(df, rowvar=False)

# Covariance matrix power of -1
# Covariance matrix indicates how variables variate together
covariance_pm1 = np.linalg.matrix_power(cov, -1)
print(f"Covariance matrix: {covariance_pm1}")

# 2. Center point
mean_error = np.mean(df, axis=0)
print(f"Center point of Ozone and Temp: {mean_error}")


def mahalanobis_method(df):
    # MD
    x_minus_mu = df - np.mean(df, axis=0)
    # cov = np.cov(df.T)
    cov = np.cov(df, rowvar=False)
    inv_covmat = sp.linalg.inv(cov)
    left_term = np.dot(x_minus_mu, inv_covmat)
    mahal = np.dot(left_term, x_minus_mu.T)
    md = np.sqrt(mahal.diagonal())
    print(f"Distance: {md}")

print("\nMAHALANOBIS DISTANCE: \n")
mahalanobis_method(df)

def robust_mahalanobis_method(df):
    #Minimum covariance determinant
    rng = np.random.RandomState(0)
    # real_cov = np.cov(df.values.T)
    real_cov = np.cov(df, rowvar=False)
    X = rng.multivariate_normal(mean=np.mean(df, axis=0), cov=real_cov, size=506)
    cov = MinCovDet(random_state=0).fit(X)
    mcd = cov.covariance_ #robust covariance metric
    robust_mean = cov.location_  #robust mean
    inv_covmat = sp.linalg.inv(mcd) #inverse covariance metric
    
    #Robust M-Distance
    x_minus_mu = df - robust_mean
    left_term = np.dot(x_minus_mu, inv_covmat)
    mahal = np.dot(left_term, x_minus_mu.T)
    print(mahal)
    md = np.sqrt(mahal.diagonal())
    print("\nROBUST MAHALANOBIS DISTANCE: \n")
    print(md)

robust_mahalanobis_method(df)